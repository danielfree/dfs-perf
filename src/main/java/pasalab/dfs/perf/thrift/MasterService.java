/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pasalab.dfs.perf.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-16")
public class MasterService {

  public interface Iface {

    public boolean slave_canRun(int taskId, java.lang.String nodeName) throws SlaveNotRegisterException, org.apache.thrift.TException;

    public boolean slave_finish(int taskId, java.lang.String nodeName, boolean successFinish) throws SlaveNotRegisterException, org.apache.thrift.TException;

    public boolean slave_ready(int taskId, java.lang.String nodeName, boolean successSetup) throws SlaveNotRegisterException, org.apache.thrift.TException;

    public boolean slave_register(int taskId, java.lang.String nodeName, java.lang.String cleanupDir) throws SlaveAlreadyRegisterException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void slave_canRun(int taskId, java.lang.String nodeName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void slave_finish(int taskId, java.lang.String nodeName, boolean successFinish, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void slave_ready(int taskId, java.lang.String nodeName, boolean successSetup, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void slave_register(int taskId, java.lang.String nodeName, java.lang.String cleanupDir, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean slave_canRun(int taskId, java.lang.String nodeName) throws SlaveNotRegisterException, org.apache.thrift.TException
    {
      send_slave_canRun(taskId, nodeName);
      return recv_slave_canRun();
    }

    public void send_slave_canRun(int taskId, java.lang.String nodeName) throws org.apache.thrift.TException
    {
      slave_canRun_args args = new slave_canRun_args();
      args.setTaskId(taskId);
      args.setNodeName(nodeName);
      sendBase("slave_canRun", args);
    }

    public boolean recv_slave_canRun() throws SlaveNotRegisterException, org.apache.thrift.TException
    {
      slave_canRun_result result = new slave_canRun_result();
      receiveBase(result, "slave_canRun");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "slave_canRun failed: unknown result");
    }

    public boolean slave_finish(int taskId, java.lang.String nodeName, boolean successFinish) throws SlaveNotRegisterException, org.apache.thrift.TException
    {
      send_slave_finish(taskId, nodeName, successFinish);
      return recv_slave_finish();
    }

    public void send_slave_finish(int taskId, java.lang.String nodeName, boolean successFinish) throws org.apache.thrift.TException
    {
      slave_finish_args args = new slave_finish_args();
      args.setTaskId(taskId);
      args.setNodeName(nodeName);
      args.setSuccessFinish(successFinish);
      sendBase("slave_finish", args);
    }

    public boolean recv_slave_finish() throws SlaveNotRegisterException, org.apache.thrift.TException
    {
      slave_finish_result result = new slave_finish_result();
      receiveBase(result, "slave_finish");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "slave_finish failed: unknown result");
    }

    public boolean slave_ready(int taskId, java.lang.String nodeName, boolean successSetup) throws SlaveNotRegisterException, org.apache.thrift.TException
    {
      send_slave_ready(taskId, nodeName, successSetup);
      return recv_slave_ready();
    }

    public void send_slave_ready(int taskId, java.lang.String nodeName, boolean successSetup) throws org.apache.thrift.TException
    {
      slave_ready_args args = new slave_ready_args();
      args.setTaskId(taskId);
      args.setNodeName(nodeName);
      args.setSuccessSetup(successSetup);
      sendBase("slave_ready", args);
    }

    public boolean recv_slave_ready() throws SlaveNotRegisterException, org.apache.thrift.TException
    {
      slave_ready_result result = new slave_ready_result();
      receiveBase(result, "slave_ready");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "slave_ready failed: unknown result");
    }

    public boolean slave_register(int taskId, java.lang.String nodeName, java.lang.String cleanupDir) throws SlaveAlreadyRegisterException, org.apache.thrift.TException
    {
      send_slave_register(taskId, nodeName, cleanupDir);
      return recv_slave_register();
    }

    public void send_slave_register(int taskId, java.lang.String nodeName, java.lang.String cleanupDir) throws org.apache.thrift.TException
    {
      slave_register_args args = new slave_register_args();
      args.setTaskId(taskId);
      args.setNodeName(nodeName);
      args.setCleanupDir(cleanupDir);
      sendBase("slave_register", args);
    }

    public boolean recv_slave_register() throws SlaveAlreadyRegisterException, org.apache.thrift.TException
    {
      slave_register_result result = new slave_register_result();
      receiveBase(result, "slave_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "slave_register failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void slave_canRun(int taskId, java.lang.String nodeName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      slave_canRun_call method_call = new slave_canRun_call(taskId, nodeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class slave_canRun_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int taskId;
      private java.lang.String nodeName;
      public slave_canRun_call(int taskId, java.lang.String nodeName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.nodeName = nodeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("slave_canRun", org.apache.thrift.protocol.TMessageType.CALL, 0));
        slave_canRun_args args = new slave_canRun_args();
        args.setTaskId(taskId);
        args.setNodeName(nodeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SlaveNotRegisterException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_slave_canRun();
      }
    }

    public void slave_finish(int taskId, java.lang.String nodeName, boolean successFinish, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      slave_finish_call method_call = new slave_finish_call(taskId, nodeName, successFinish, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class slave_finish_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int taskId;
      private java.lang.String nodeName;
      private boolean successFinish;
      public slave_finish_call(int taskId, java.lang.String nodeName, boolean successFinish, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.nodeName = nodeName;
        this.successFinish = successFinish;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("slave_finish", org.apache.thrift.protocol.TMessageType.CALL, 0));
        slave_finish_args args = new slave_finish_args();
        args.setTaskId(taskId);
        args.setNodeName(nodeName);
        args.setSuccessFinish(successFinish);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SlaveNotRegisterException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_slave_finish();
      }
    }

    public void slave_ready(int taskId, java.lang.String nodeName, boolean successSetup, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      slave_ready_call method_call = new slave_ready_call(taskId, nodeName, successSetup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class slave_ready_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int taskId;
      private java.lang.String nodeName;
      private boolean successSetup;
      public slave_ready_call(int taskId, java.lang.String nodeName, boolean successSetup, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.nodeName = nodeName;
        this.successSetup = successSetup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("slave_ready", org.apache.thrift.protocol.TMessageType.CALL, 0));
        slave_ready_args args = new slave_ready_args();
        args.setTaskId(taskId);
        args.setNodeName(nodeName);
        args.setSuccessSetup(successSetup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SlaveNotRegisterException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_slave_ready();
      }
    }

    public void slave_register(int taskId, java.lang.String nodeName, java.lang.String cleanupDir, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      slave_register_call method_call = new slave_register_call(taskId, nodeName, cleanupDir, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class slave_register_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int taskId;
      private java.lang.String nodeName;
      private java.lang.String cleanupDir;
      public slave_register_call(int taskId, java.lang.String nodeName, java.lang.String cleanupDir, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.nodeName = nodeName;
        this.cleanupDir = cleanupDir;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("slave_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        slave_register_args args = new slave_register_args();
        args.setTaskId(taskId);
        args.setNodeName(nodeName);
        args.setCleanupDir(cleanupDir);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SlaveAlreadyRegisterException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_slave_register();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("slave_canRun", new slave_canRun());
      processMap.put("slave_finish", new slave_finish());
      processMap.put("slave_ready", new slave_ready());
      processMap.put("slave_register", new slave_register());
      return processMap;
    }

    public static class slave_canRun<I extends Iface> extends org.apache.thrift.ProcessFunction<I, slave_canRun_args> {
      public slave_canRun() {
        super("slave_canRun");
      }

      public slave_canRun_args getEmptyArgsInstance() {
        return new slave_canRun_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public slave_canRun_result getResult(I iface, slave_canRun_args args) throws org.apache.thrift.TException {
        slave_canRun_result result = new slave_canRun_result();
        try {
          result.success = iface.slave_canRun(args.taskId, args.nodeName);
          result.setSuccessIsSet(true);
        } catch (SlaveNotRegisterException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class slave_finish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, slave_finish_args> {
      public slave_finish() {
        super("slave_finish");
      }

      public slave_finish_args getEmptyArgsInstance() {
        return new slave_finish_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public slave_finish_result getResult(I iface, slave_finish_args args) throws org.apache.thrift.TException {
        slave_finish_result result = new slave_finish_result();
        try {
          result.success = iface.slave_finish(args.taskId, args.nodeName, args.successFinish);
          result.setSuccessIsSet(true);
        } catch (SlaveNotRegisterException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class slave_ready<I extends Iface> extends org.apache.thrift.ProcessFunction<I, slave_ready_args> {
      public slave_ready() {
        super("slave_ready");
      }

      public slave_ready_args getEmptyArgsInstance() {
        return new slave_ready_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public slave_ready_result getResult(I iface, slave_ready_args args) throws org.apache.thrift.TException {
        slave_ready_result result = new slave_ready_result();
        try {
          result.success = iface.slave_ready(args.taskId, args.nodeName, args.successSetup);
          result.setSuccessIsSet(true);
        } catch (SlaveNotRegisterException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class slave_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, slave_register_args> {
      public slave_register() {
        super("slave_register");
      }

      public slave_register_args getEmptyArgsInstance() {
        return new slave_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public slave_register_result getResult(I iface, slave_register_args args) throws org.apache.thrift.TException {
        slave_register_result result = new slave_register_result();
        try {
          result.success = iface.slave_register(args.taskId, args.nodeName, args.cleanupDir);
          result.setSuccessIsSet(true);
        } catch (SlaveAlreadyRegisterException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("slave_canRun", new slave_canRun());
      processMap.put("slave_finish", new slave_finish());
      processMap.put("slave_ready", new slave_ready());
      processMap.put("slave_register", new slave_register());
      return processMap;
    }

    public static class slave_canRun<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, slave_canRun_args, java.lang.Boolean> {
      public slave_canRun() {
        super("slave_canRun");
      }

      public slave_canRun_args getEmptyArgsInstance() {
        return new slave_canRun_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            slave_canRun_result result = new slave_canRun_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            slave_canRun_result result = new slave_canRun_result();
            if (e instanceof SlaveNotRegisterException) {
              result.e = (SlaveNotRegisterException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, slave_canRun_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.slave_canRun(args.taskId, args.nodeName,resultHandler);
      }
    }

    public static class slave_finish<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, slave_finish_args, java.lang.Boolean> {
      public slave_finish() {
        super("slave_finish");
      }

      public slave_finish_args getEmptyArgsInstance() {
        return new slave_finish_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            slave_finish_result result = new slave_finish_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            slave_finish_result result = new slave_finish_result();
            if (e instanceof SlaveNotRegisterException) {
              result.e = (SlaveNotRegisterException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, slave_finish_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.slave_finish(args.taskId, args.nodeName, args.successFinish,resultHandler);
      }
    }

    public static class slave_ready<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, slave_ready_args, java.lang.Boolean> {
      public slave_ready() {
        super("slave_ready");
      }

      public slave_ready_args getEmptyArgsInstance() {
        return new slave_ready_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            slave_ready_result result = new slave_ready_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            slave_ready_result result = new slave_ready_result();
            if (e instanceof SlaveNotRegisterException) {
              result.e = (SlaveNotRegisterException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, slave_ready_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.slave_ready(args.taskId, args.nodeName, args.successSetup,resultHandler);
      }
    }

    public static class slave_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, slave_register_args, java.lang.Boolean> {
      public slave_register() {
        super("slave_register");
      }

      public slave_register_args getEmptyArgsInstance() {
        return new slave_register_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            slave_register_result result = new slave_register_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            slave_register_result result = new slave_register_result();
            if (e instanceof SlaveAlreadyRegisterException) {
              result.e = (SlaveAlreadyRegisterException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, slave_register_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.slave_register(args.taskId, args.nodeName, args.cleanupDir,resultHandler);
      }
    }

  }

  public static class slave_canRun_args implements org.apache.thrift.TBase<slave_canRun_args, slave_canRun_args._Fields>, java.io.Serializable, Cloneable, Comparable<slave_canRun_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_canRun_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_canRun_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_canRun_argsTupleSchemeFactory();

    private int taskId; // required
    private java.lang.String nodeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      NODE_NAME((short)2, "nodeName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // NODE_NAME
            return NODE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_canRun_args.class, metaDataMap);
    }

    public slave_canRun_args() {
    }

    public slave_canRun_args(
      int taskId,
      java.lang.String nodeName)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.nodeName = nodeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_canRun_args(slave_canRun_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      if (other.isSetNodeName()) {
        this.nodeName = other.nodeName;
      }
    }

    public slave_canRun_args deepCopy() {
      return new slave_canRun_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.nodeName = null;
    }

    public int getTaskId() {
      return this.taskId;
    }

    public void setTaskId(int taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public java.lang.String getNodeName() {
      return this.nodeName;
    }

    public void setNodeName(java.lang.String nodeName) {
      this.nodeName = nodeName;
    }

    public void unsetNodeName() {
      this.nodeName = null;
    }

    /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeName() {
      return this.nodeName != null;
    }

    public void setNodeNameIsSet(boolean value) {
      if (!value) {
        this.nodeName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((java.lang.Integer)value);
        }
        break;

      case NODE_NAME:
        if (value == null) {
          unsetNodeName();
        } else {
          setNodeName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case NODE_NAME:
        return getNodeName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case NODE_NAME:
        return isSetNodeName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_canRun_args)
        return this.equals((slave_canRun_args)that);
      return false;
    }

    public boolean equals(slave_canRun_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_nodeName = true && this.isSetNodeName();
      boolean that_present_nodeName = true && that.isSetNodeName();
      if (this_present_nodeName || that_present_nodeName) {
        if (!(this_present_nodeName && that_present_nodeName))
          return false;
        if (!this.nodeName.equals(that.nodeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + taskId;

      hashCode = hashCode * 8191 + ((isSetNodeName()) ? 131071 : 524287);
      if (isSetNodeName())
        hashCode = hashCode * 8191 + nodeName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(slave_canRun_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, other.nodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_canRun_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeName:");
      if (this.nodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_canRun_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_canRun_argsStandardScheme getScheme() {
        return new slave_canRun_argsStandardScheme();
      }
    }

    private static class slave_canRun_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_canRun_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_canRun_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskId = iprot.readI32();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeName = iprot.readString();
                struct.setNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_canRun_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.nodeName != null) {
          oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_canRun_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_canRun_argsTupleScheme getScheme() {
        return new slave_canRun_argsTupleScheme();
      }
    }

    private static class slave_canRun_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_canRun_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_canRun_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskId()) {
          oprot.writeI32(struct.taskId);
        }
        if (struct.isSetNodeName()) {
          oprot.writeString(struct.nodeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_canRun_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI32();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeName = iprot.readString();
          struct.setNodeNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_canRun_result implements org.apache.thrift.TBase<slave_canRun_result, slave_canRun_result._Fields>, java.io.Serializable, Cloneable, Comparable<slave_canRun_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_canRun_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_canRun_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_canRun_resultTupleSchemeFactory();

    private boolean success; // required
    private SlaveNotRegisterException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlaveNotRegisterException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_canRun_result.class, metaDataMap);
    }

    public slave_canRun_result() {
    }

    public slave_canRun_result(
      boolean success,
      SlaveNotRegisterException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_canRun_result(slave_canRun_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new SlaveNotRegisterException(other.e);
      }
    }

    public slave_canRun_result deepCopy() {
      return new slave_canRun_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SlaveNotRegisterException getE() {
      return this.e;
    }

    public void setE(SlaveNotRegisterException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((SlaveNotRegisterException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_canRun_result)
        return this.equals((slave_canRun_result)that);
      return false;
    }

    public boolean equals(slave_canRun_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(slave_canRun_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_canRun_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_canRun_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_canRun_resultStandardScheme getScheme() {
        return new slave_canRun_resultStandardScheme();
      }
    }

    private static class slave_canRun_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_canRun_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_canRun_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new SlaveNotRegisterException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_canRun_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_canRun_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_canRun_resultTupleScheme getScheme() {
        return new slave_canRun_resultTupleScheme();
      }
    }

    private static class slave_canRun_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_canRun_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_canRun_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_canRun_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new SlaveNotRegisterException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_finish_args implements org.apache.thrift.TBase<slave_finish_args, slave_finish_args._Fields>, java.io.Serializable, Cloneable, Comparable<slave_finish_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_finish_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SUCCESS_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("successFinish", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_finish_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_finish_argsTupleSchemeFactory();

    private int taskId; // required
    private java.lang.String nodeName; // required
    private boolean successFinish; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      NODE_NAME((short)2, "nodeName"),
      SUCCESS_FINISH((short)3, "successFinish");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // NODE_NAME
            return NODE_NAME;
          case 3: // SUCCESS_FINISH
            return SUCCESS_FINISH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __SUCCESSFINISH_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUCCESS_FINISH, new org.apache.thrift.meta_data.FieldMetaData("successFinish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_finish_args.class, metaDataMap);
    }

    public slave_finish_args() {
    }

    public slave_finish_args(
      int taskId,
      java.lang.String nodeName,
      boolean successFinish)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.nodeName = nodeName;
      this.successFinish = successFinish;
      setSuccessFinishIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_finish_args(slave_finish_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      if (other.isSetNodeName()) {
        this.nodeName = other.nodeName;
      }
      this.successFinish = other.successFinish;
    }

    public slave_finish_args deepCopy() {
      return new slave_finish_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.nodeName = null;
      setSuccessFinishIsSet(false);
      this.successFinish = false;
    }

    public int getTaskId() {
      return this.taskId;
    }

    public void setTaskId(int taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public java.lang.String getNodeName() {
      return this.nodeName;
    }

    public void setNodeName(java.lang.String nodeName) {
      this.nodeName = nodeName;
    }

    public void unsetNodeName() {
      this.nodeName = null;
    }

    /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeName() {
      return this.nodeName != null;
    }

    public void setNodeNameIsSet(boolean value) {
      if (!value) {
        this.nodeName = null;
      }
    }

    public boolean isSuccessFinish() {
      return this.successFinish;
    }

    public void setSuccessFinish(boolean successFinish) {
      this.successFinish = successFinish;
      setSuccessFinishIsSet(true);
    }

    public void unsetSuccessFinish() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESSFINISH_ISSET_ID);
    }

    /** Returns true if field successFinish is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccessFinish() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESSFINISH_ISSET_ID);
    }

    public void setSuccessFinishIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESSFINISH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((java.lang.Integer)value);
        }
        break;

      case NODE_NAME:
        if (value == null) {
          unsetNodeName();
        } else {
          setNodeName((java.lang.String)value);
        }
        break;

      case SUCCESS_FINISH:
        if (value == null) {
          unsetSuccessFinish();
        } else {
          setSuccessFinish((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case NODE_NAME:
        return getNodeName();

      case SUCCESS_FINISH:
        return isSuccessFinish();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case NODE_NAME:
        return isSetNodeName();
      case SUCCESS_FINISH:
        return isSetSuccessFinish();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_finish_args)
        return this.equals((slave_finish_args)that);
      return false;
    }

    public boolean equals(slave_finish_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_nodeName = true && this.isSetNodeName();
      boolean that_present_nodeName = true && that.isSetNodeName();
      if (this_present_nodeName || that_present_nodeName) {
        if (!(this_present_nodeName && that_present_nodeName))
          return false;
        if (!this.nodeName.equals(that.nodeName))
          return false;
      }

      boolean this_present_successFinish = true;
      boolean that_present_successFinish = true;
      if (this_present_successFinish || that_present_successFinish) {
        if (!(this_present_successFinish && that_present_successFinish))
          return false;
        if (this.successFinish != that.successFinish)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + taskId;

      hashCode = hashCode * 8191 + ((isSetNodeName()) ? 131071 : 524287);
      if (isSetNodeName())
        hashCode = hashCode * 8191 + nodeName.hashCode();

      hashCode = hashCode * 8191 + ((successFinish) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(slave_finish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, other.nodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSuccessFinish()).compareTo(other.isSetSuccessFinish());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccessFinish()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successFinish, other.successFinish);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_finish_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeName:");
      if (this.nodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("successFinish:");
      sb.append(this.successFinish);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_finish_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_finish_argsStandardScheme getScheme() {
        return new slave_finish_argsStandardScheme();
      }
    }

    private static class slave_finish_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_finish_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_finish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskId = iprot.readI32();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeName = iprot.readString();
                struct.setNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SUCCESS_FINISH
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.successFinish = iprot.readBool();
                struct.setSuccessFinishIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_finish_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.nodeName != null) {
          oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUCCESS_FINISH_FIELD_DESC);
        oprot.writeBool(struct.successFinish);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_finish_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_finish_argsTupleScheme getScheme() {
        return new slave_finish_argsTupleScheme();
      }
    }

    private static class slave_finish_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_finish_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_finish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeName()) {
          optionals.set(1);
        }
        if (struct.isSetSuccessFinish()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaskId()) {
          oprot.writeI32(struct.taskId);
        }
        if (struct.isSetNodeName()) {
          oprot.writeString(struct.nodeName);
        }
        if (struct.isSetSuccessFinish()) {
          oprot.writeBool(struct.successFinish);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_finish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI32();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeName = iprot.readString();
          struct.setNodeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.successFinish = iprot.readBool();
          struct.setSuccessFinishIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_finish_result implements org.apache.thrift.TBase<slave_finish_result, slave_finish_result._Fields>, java.io.Serializable, Cloneable, Comparable<slave_finish_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_finish_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_finish_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_finish_resultTupleSchemeFactory();

    private boolean success; // required
    private SlaveNotRegisterException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlaveNotRegisterException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_finish_result.class, metaDataMap);
    }

    public slave_finish_result() {
    }

    public slave_finish_result(
      boolean success,
      SlaveNotRegisterException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_finish_result(slave_finish_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new SlaveNotRegisterException(other.e);
      }
    }

    public slave_finish_result deepCopy() {
      return new slave_finish_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SlaveNotRegisterException getE() {
      return this.e;
    }

    public void setE(SlaveNotRegisterException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((SlaveNotRegisterException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_finish_result)
        return this.equals((slave_finish_result)that);
      return false;
    }

    public boolean equals(slave_finish_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(slave_finish_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_finish_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_finish_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_finish_resultStandardScheme getScheme() {
        return new slave_finish_resultStandardScheme();
      }
    }

    private static class slave_finish_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_finish_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_finish_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new SlaveNotRegisterException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_finish_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_finish_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_finish_resultTupleScheme getScheme() {
        return new slave_finish_resultTupleScheme();
      }
    }

    private static class slave_finish_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_finish_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_finish_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_finish_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new SlaveNotRegisterException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_ready_args implements org.apache.thrift.TBase<slave_ready_args, slave_ready_args._Fields>, java.io.Serializable, Cloneable, Comparable<slave_ready_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_ready_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SUCCESS_SETUP_FIELD_DESC = new org.apache.thrift.protocol.TField("successSetup", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_ready_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_ready_argsTupleSchemeFactory();

    private int taskId; // required
    private java.lang.String nodeName; // required
    private boolean successSetup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      NODE_NAME((short)2, "nodeName"),
      SUCCESS_SETUP((short)3, "successSetup");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // NODE_NAME
            return NODE_NAME;
          case 3: // SUCCESS_SETUP
            return SUCCESS_SETUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __SUCCESSSETUP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUCCESS_SETUP, new org.apache.thrift.meta_data.FieldMetaData("successSetup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_ready_args.class, metaDataMap);
    }

    public slave_ready_args() {
    }

    public slave_ready_args(
      int taskId,
      java.lang.String nodeName,
      boolean successSetup)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.nodeName = nodeName;
      this.successSetup = successSetup;
      setSuccessSetupIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_ready_args(slave_ready_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      if (other.isSetNodeName()) {
        this.nodeName = other.nodeName;
      }
      this.successSetup = other.successSetup;
    }

    public slave_ready_args deepCopy() {
      return new slave_ready_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.nodeName = null;
      setSuccessSetupIsSet(false);
      this.successSetup = false;
    }

    public int getTaskId() {
      return this.taskId;
    }

    public void setTaskId(int taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public java.lang.String getNodeName() {
      return this.nodeName;
    }

    public void setNodeName(java.lang.String nodeName) {
      this.nodeName = nodeName;
    }

    public void unsetNodeName() {
      this.nodeName = null;
    }

    /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeName() {
      return this.nodeName != null;
    }

    public void setNodeNameIsSet(boolean value) {
      if (!value) {
        this.nodeName = null;
      }
    }

    public boolean isSuccessSetup() {
      return this.successSetup;
    }

    public void setSuccessSetup(boolean successSetup) {
      this.successSetup = successSetup;
      setSuccessSetupIsSet(true);
    }

    public void unsetSuccessSetup() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESSSETUP_ISSET_ID);
    }

    /** Returns true if field successSetup is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccessSetup() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESSSETUP_ISSET_ID);
    }

    public void setSuccessSetupIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESSSETUP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((java.lang.Integer)value);
        }
        break;

      case NODE_NAME:
        if (value == null) {
          unsetNodeName();
        } else {
          setNodeName((java.lang.String)value);
        }
        break;

      case SUCCESS_SETUP:
        if (value == null) {
          unsetSuccessSetup();
        } else {
          setSuccessSetup((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case NODE_NAME:
        return getNodeName();

      case SUCCESS_SETUP:
        return isSuccessSetup();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case NODE_NAME:
        return isSetNodeName();
      case SUCCESS_SETUP:
        return isSetSuccessSetup();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_ready_args)
        return this.equals((slave_ready_args)that);
      return false;
    }

    public boolean equals(slave_ready_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_nodeName = true && this.isSetNodeName();
      boolean that_present_nodeName = true && that.isSetNodeName();
      if (this_present_nodeName || that_present_nodeName) {
        if (!(this_present_nodeName && that_present_nodeName))
          return false;
        if (!this.nodeName.equals(that.nodeName))
          return false;
      }

      boolean this_present_successSetup = true;
      boolean that_present_successSetup = true;
      if (this_present_successSetup || that_present_successSetup) {
        if (!(this_present_successSetup && that_present_successSetup))
          return false;
        if (this.successSetup != that.successSetup)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + taskId;

      hashCode = hashCode * 8191 + ((isSetNodeName()) ? 131071 : 524287);
      if (isSetNodeName())
        hashCode = hashCode * 8191 + nodeName.hashCode();

      hashCode = hashCode * 8191 + ((successSetup) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(slave_ready_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, other.nodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSuccessSetup()).compareTo(other.isSetSuccessSetup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccessSetup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successSetup, other.successSetup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_ready_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeName:");
      if (this.nodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("successSetup:");
      sb.append(this.successSetup);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_ready_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_ready_argsStandardScheme getScheme() {
        return new slave_ready_argsStandardScheme();
      }
    }

    private static class slave_ready_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_ready_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_ready_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskId = iprot.readI32();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeName = iprot.readString();
                struct.setNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SUCCESS_SETUP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.successSetup = iprot.readBool();
                struct.setSuccessSetupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_ready_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.nodeName != null) {
          oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUCCESS_SETUP_FIELD_DESC);
        oprot.writeBool(struct.successSetup);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_ready_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_ready_argsTupleScheme getScheme() {
        return new slave_ready_argsTupleScheme();
      }
    }

    private static class slave_ready_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_ready_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_ready_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeName()) {
          optionals.set(1);
        }
        if (struct.isSetSuccessSetup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaskId()) {
          oprot.writeI32(struct.taskId);
        }
        if (struct.isSetNodeName()) {
          oprot.writeString(struct.nodeName);
        }
        if (struct.isSetSuccessSetup()) {
          oprot.writeBool(struct.successSetup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_ready_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI32();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeName = iprot.readString();
          struct.setNodeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.successSetup = iprot.readBool();
          struct.setSuccessSetupIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_ready_result implements org.apache.thrift.TBase<slave_ready_result, slave_ready_result._Fields>, java.io.Serializable, Cloneable, Comparable<slave_ready_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_ready_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_ready_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_ready_resultTupleSchemeFactory();

    private boolean success; // required
    private SlaveNotRegisterException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlaveNotRegisterException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_ready_result.class, metaDataMap);
    }

    public slave_ready_result() {
    }

    public slave_ready_result(
      boolean success,
      SlaveNotRegisterException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_ready_result(slave_ready_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new SlaveNotRegisterException(other.e);
      }
    }

    public slave_ready_result deepCopy() {
      return new slave_ready_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SlaveNotRegisterException getE() {
      return this.e;
    }

    public void setE(SlaveNotRegisterException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((SlaveNotRegisterException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_ready_result)
        return this.equals((slave_ready_result)that);
      return false;
    }

    public boolean equals(slave_ready_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(slave_ready_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_ready_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_ready_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_ready_resultStandardScheme getScheme() {
        return new slave_ready_resultStandardScheme();
      }
    }

    private static class slave_ready_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_ready_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_ready_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new SlaveNotRegisterException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_ready_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_ready_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_ready_resultTupleScheme getScheme() {
        return new slave_ready_resultTupleScheme();
      }
    }

    private static class slave_ready_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_ready_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_ready_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_ready_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new SlaveNotRegisterException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_register_args implements org.apache.thrift.TBase<slave_register_args, slave_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<slave_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_register_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLEANUP_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanupDir", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_register_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_register_argsTupleSchemeFactory();

    private int taskId; // required
    private java.lang.String nodeName; // required
    private java.lang.String cleanupDir; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      NODE_NAME((short)2, "nodeName"),
      CLEANUP_DIR((short)3, "cleanupDir");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // NODE_NAME
            return NODE_NAME;
          case 3: // CLEANUP_DIR
            return CLEANUP_DIR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLEANUP_DIR, new org.apache.thrift.meta_data.FieldMetaData("cleanupDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_register_args.class, metaDataMap);
    }

    public slave_register_args() {
    }

    public slave_register_args(
      int taskId,
      java.lang.String nodeName,
      java.lang.String cleanupDir)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.nodeName = nodeName;
      this.cleanupDir = cleanupDir;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_register_args(slave_register_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      if (other.isSetNodeName()) {
        this.nodeName = other.nodeName;
      }
      if (other.isSetCleanupDir()) {
        this.cleanupDir = other.cleanupDir;
      }
    }

    public slave_register_args deepCopy() {
      return new slave_register_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.nodeName = null;
      this.cleanupDir = null;
    }

    public int getTaskId() {
      return this.taskId;
    }

    public void setTaskId(int taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public java.lang.String getNodeName() {
      return this.nodeName;
    }

    public void setNodeName(java.lang.String nodeName) {
      this.nodeName = nodeName;
    }

    public void unsetNodeName() {
      this.nodeName = null;
    }

    /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeName() {
      return this.nodeName != null;
    }

    public void setNodeNameIsSet(boolean value) {
      if (!value) {
        this.nodeName = null;
      }
    }

    public java.lang.String getCleanupDir() {
      return this.cleanupDir;
    }

    public void setCleanupDir(java.lang.String cleanupDir) {
      this.cleanupDir = cleanupDir;
    }

    public void unsetCleanupDir() {
      this.cleanupDir = null;
    }

    /** Returns true if field cleanupDir is set (has been assigned a value) and false otherwise */
    public boolean isSetCleanupDir() {
      return this.cleanupDir != null;
    }

    public void setCleanupDirIsSet(boolean value) {
      if (!value) {
        this.cleanupDir = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((java.lang.Integer)value);
        }
        break;

      case NODE_NAME:
        if (value == null) {
          unsetNodeName();
        } else {
          setNodeName((java.lang.String)value);
        }
        break;

      case CLEANUP_DIR:
        if (value == null) {
          unsetCleanupDir();
        } else {
          setCleanupDir((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case NODE_NAME:
        return getNodeName();

      case CLEANUP_DIR:
        return getCleanupDir();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case NODE_NAME:
        return isSetNodeName();
      case CLEANUP_DIR:
        return isSetCleanupDir();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_register_args)
        return this.equals((slave_register_args)that);
      return false;
    }

    public boolean equals(slave_register_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_nodeName = true && this.isSetNodeName();
      boolean that_present_nodeName = true && that.isSetNodeName();
      if (this_present_nodeName || that_present_nodeName) {
        if (!(this_present_nodeName && that_present_nodeName))
          return false;
        if (!this.nodeName.equals(that.nodeName))
          return false;
      }

      boolean this_present_cleanupDir = true && this.isSetCleanupDir();
      boolean that_present_cleanupDir = true && that.isSetCleanupDir();
      if (this_present_cleanupDir || that_present_cleanupDir) {
        if (!(this_present_cleanupDir && that_present_cleanupDir))
          return false;
        if (!this.cleanupDir.equals(that.cleanupDir))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + taskId;

      hashCode = hashCode * 8191 + ((isSetNodeName()) ? 131071 : 524287);
      if (isSetNodeName())
        hashCode = hashCode * 8191 + nodeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetCleanupDir()) ? 131071 : 524287);
      if (isSetCleanupDir())
        hashCode = hashCode * 8191 + cleanupDir.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(slave_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, other.nodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCleanupDir()).compareTo(other.isSetCleanupDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCleanupDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanupDir, other.cleanupDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_register_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeName:");
      if (this.nodeName == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cleanupDir:");
      if (this.cleanupDir == null) {
        sb.append("null");
      } else {
        sb.append(this.cleanupDir);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_register_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_register_argsStandardScheme getScheme() {
        return new slave_register_argsStandardScheme();
      }
    }

    private static class slave_register_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskId = iprot.readI32();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeName = iprot.readString();
                struct.setNodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLEANUP_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cleanupDir = iprot.readString();
                struct.setCleanupDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.nodeName != null) {
          oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
          oprot.writeString(struct.nodeName);
          oprot.writeFieldEnd();
        }
        if (struct.cleanupDir != null) {
          oprot.writeFieldBegin(CLEANUP_DIR_FIELD_DESC);
          oprot.writeString(struct.cleanupDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_register_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_register_argsTupleScheme getScheme() {
        return new slave_register_argsTupleScheme();
      }
    }

    private static class slave_register_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeName()) {
          optionals.set(1);
        }
        if (struct.isSetCleanupDir()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaskId()) {
          oprot.writeI32(struct.taskId);
        }
        if (struct.isSetNodeName()) {
          oprot.writeString(struct.nodeName);
        }
        if (struct.isSetCleanupDir()) {
          oprot.writeString(struct.cleanupDir);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI32();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeName = iprot.readString();
          struct.setNodeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cleanupDir = iprot.readString();
          struct.setCleanupDirIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class slave_register_result implements org.apache.thrift.TBase<slave_register_result, slave_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<slave_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slave_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new slave_register_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new slave_register_resultTupleSchemeFactory();

    private boolean success; // required
    private SlaveAlreadyRegisterException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlaveAlreadyRegisterException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slave_register_result.class, metaDataMap);
    }

    public slave_register_result() {
    }

    public slave_register_result(
      boolean success,
      SlaveAlreadyRegisterException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slave_register_result(slave_register_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new SlaveAlreadyRegisterException(other.e);
      }
    }

    public slave_register_result deepCopy() {
      return new slave_register_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SlaveAlreadyRegisterException getE() {
      return this.e;
    }

    public void setE(SlaveAlreadyRegisterException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((SlaveAlreadyRegisterException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof slave_register_result)
        return this.equals((slave_register_result)that);
      return false;
    }

    public boolean equals(slave_register_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(slave_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("slave_register_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slave_register_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_register_resultStandardScheme getScheme() {
        return new slave_register_resultStandardScheme();
      }
    }

    private static class slave_register_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<slave_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slave_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new SlaveAlreadyRegisterException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slave_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slave_register_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public slave_register_resultTupleScheme getScheme() {
        return new slave_register_resultTupleScheme();
      }
    }

    private static class slave_register_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<slave_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slave_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slave_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new SlaveAlreadyRegisterException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
